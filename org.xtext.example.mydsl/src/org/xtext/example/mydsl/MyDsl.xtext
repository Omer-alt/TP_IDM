// automatically generated by Xtext
grammar org.xtext.simplepdl.SimplePDL with org.eclipse.xtext.common.Terminals
//grammar org.xtext.example.mydsl.MyDsl with org.eclipse.xtext.common.Terminals

//import "http://www.mini/projet" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore
generate myDsl "http://www.xtext.org/simplepdl/mydsl/MyDsl"

Process returns Process:
	{Process}
	'Process'
	name=EString
	'{'
		('processElements' '{' processElements+=ProcessElement ( "," processElements+=ProcessElement)* '}' )?
	'}';

ProcessElement returns ProcessElement:
	ProcessElement_Impl | WorkDefinition | WorkSequence;

Resource returns Resource:
	Humain | Materiel;



ProcessElement_Impl returns ProcessElement:
	{ProcessElement}
	'ProcessElement'
	name=EString
	'{'
		('description' description=EString)?
	'}';

EString returns ecore::EString:
	STRING | ID;

WorkDefinition returns WorkDefinition:
	{WorkDefinition}
	'WorkDefinition'
	name=EString
	'{'
		('description' description=EString)?
		('duration' duration=EInt)?
		('startDate' startDate=EString)?
		('endDate' endDate=EString)?
		('linksToSuccessor' '(' linksToSuccessor+=[WorkSequence|EString] ( "," linksToSuccessor+=[WorkSequence|EString])* ')' )?
		('linksToPredecessor' '(' linksToPredecessor+=[WorkSequence|EString] ( "," linksToPredecessor+=[WorkSequence|EString])* ')' )?
		('resource' '{' resource+=Resource ( "," resource+=Resource)* '}' )?
	'}';

WorkSequence returns WorkSequence:
	'WorkSequence'
	name=EString
	'{'
		('description' description=EString)?
		('type' type=WorkSequenceType)?
		'predecessor' predecessor=[WorkDefinition|EString]
		'successor' successor=[WorkDefinition|EString]
	'}';

EInt returns ecore::EInt:
	'-'? INT; 	

EDate returns ecore::EDate:
	'EDate' /* TODO: implement this rule and an appropriate IValueConverter */;
	

Humain returns Humain:
	{Humain}
	'Humain'
	name=EString
	'{'
		('role' role=EString)?
	'}';

Materiel returns Materiel:
	{Materiel}
	'Materiel'
	name=EString
	'{'
		('quantite' quantite=EInt)?
	'}';

enum WorkSequenceType returns WorkSequenceType:
				startToStart = 'startToStart' | finishToStart = 'finishToStart' | startToFinish = 'startToFinish' | finishToFinish = 'finishToFinish';
