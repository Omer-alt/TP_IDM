/**
 * generated by Xtext 2.38.0
 */
package org.xtext.simplepdl.myDsl.impl;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.xtext.simplepdl.myDsl.MyDslPackage;
import org.xtext.simplepdl.myDsl.WorkDefinition;
import org.xtext.simplepdl.myDsl.WorkSequence;
import org.xtext.simplepdl.myDsl.WorkSequenceType;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Work Sequence</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.simplepdl.myDsl.impl.WorkSequenceImpl#getType <em>Type</em>}</li>
 *   <li>{@link org.xtext.simplepdl.myDsl.impl.WorkSequenceImpl#getPredecessor <em>Predecessor</em>}</li>
 *   <li>{@link org.xtext.simplepdl.myDsl.impl.WorkSequenceImpl#getSuccessor <em>Successor</em>}</li>
 * </ul>
 *
 * @generated
 */
public class WorkSequenceImpl extends ProcessElementImpl implements WorkSequence
{
  /**
   * The default value of the '{@link #getType() <em>Type</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getType()
   * @generated
   * @ordered
   */
  protected static final WorkSequenceType TYPE_EDEFAULT = WorkSequenceType.START_TO_START;

  /**
   * The cached value of the '{@link #getType() <em>Type</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getType()
   * @generated
   * @ordered
   */
  protected WorkSequenceType type = TYPE_EDEFAULT;

  /**
   * The cached value of the '{@link #getPredecessor() <em>Predecessor</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPredecessor()
   * @generated
   * @ordered
   */
  protected WorkDefinition predecessor;

  /**
   * The cached value of the '{@link #getSuccessor() <em>Successor</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSuccessor()
   * @generated
   * @ordered
   */
  protected WorkDefinition successor;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected WorkSequenceImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return MyDslPackage.Literals.WORK_SEQUENCE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public WorkSequenceType getType()
  {
    return type;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setType(WorkSequenceType newType)
  {
    WorkSequenceType oldType = type;
    type = newType == null ? TYPE_EDEFAULT : newType;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MyDslPackage.WORK_SEQUENCE__TYPE, oldType, type));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public WorkDefinition getPredecessor()
  {
    if (predecessor != null && predecessor.eIsProxy())
    {
      InternalEObject oldPredecessor = (InternalEObject)predecessor;
      predecessor = (WorkDefinition)eResolveProxy(oldPredecessor);
      if (predecessor != oldPredecessor)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, MyDslPackage.WORK_SEQUENCE__PREDECESSOR, oldPredecessor, predecessor));
      }
    }
    return predecessor;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public WorkDefinition basicGetPredecessor()
  {
    return predecessor;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setPredecessor(WorkDefinition newPredecessor)
  {
    WorkDefinition oldPredecessor = predecessor;
    predecessor = newPredecessor;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MyDslPackage.WORK_SEQUENCE__PREDECESSOR, oldPredecessor, predecessor));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public WorkDefinition getSuccessor()
  {
    if (successor != null && successor.eIsProxy())
    {
      InternalEObject oldSuccessor = (InternalEObject)successor;
      successor = (WorkDefinition)eResolveProxy(oldSuccessor);
      if (successor != oldSuccessor)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, MyDslPackage.WORK_SEQUENCE__SUCCESSOR, oldSuccessor, successor));
      }
    }
    return successor;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public WorkDefinition basicGetSuccessor()
  {
    return successor;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setSuccessor(WorkDefinition newSuccessor)
  {
    WorkDefinition oldSuccessor = successor;
    successor = newSuccessor;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MyDslPackage.WORK_SEQUENCE__SUCCESSOR, oldSuccessor, successor));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case MyDslPackage.WORK_SEQUENCE__TYPE:
        return getType();
      case MyDslPackage.WORK_SEQUENCE__PREDECESSOR:
        if (resolve) return getPredecessor();
        return basicGetPredecessor();
      case MyDslPackage.WORK_SEQUENCE__SUCCESSOR:
        if (resolve) return getSuccessor();
        return basicGetSuccessor();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case MyDslPackage.WORK_SEQUENCE__TYPE:
        setType((WorkSequenceType)newValue);
        return;
      case MyDslPackage.WORK_SEQUENCE__PREDECESSOR:
        setPredecessor((WorkDefinition)newValue);
        return;
      case MyDslPackage.WORK_SEQUENCE__SUCCESSOR:
        setSuccessor((WorkDefinition)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case MyDslPackage.WORK_SEQUENCE__TYPE:
        setType(TYPE_EDEFAULT);
        return;
      case MyDslPackage.WORK_SEQUENCE__PREDECESSOR:
        setPredecessor((WorkDefinition)null);
        return;
      case MyDslPackage.WORK_SEQUENCE__SUCCESSOR:
        setSuccessor((WorkDefinition)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case MyDslPackage.WORK_SEQUENCE__TYPE:
        return type != TYPE_EDEFAULT;
      case MyDslPackage.WORK_SEQUENCE__PREDECESSOR:
        return predecessor != null;
      case MyDslPackage.WORK_SEQUENCE__SUCCESSOR:
        return successor != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (type: ");
    result.append(type);
    result.append(')');
    return result.toString();
  }

} //WorkSequenceImpl
