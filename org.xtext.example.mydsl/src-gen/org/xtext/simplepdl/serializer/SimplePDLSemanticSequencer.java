/*
 * generated by Xtext 2.38.0
 */
package org.xtext.simplepdl.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.xtext.simplepdl.myDsl.Humain;
import org.xtext.simplepdl.myDsl.Materiel;
import org.xtext.simplepdl.myDsl.MyDslPackage;
import org.xtext.simplepdl.myDsl.ProcessElement;
import org.xtext.simplepdl.myDsl.WorkDefinition;
import org.xtext.simplepdl.myDsl.WorkSequence;
import org.xtext.simplepdl.services.SimplePDLGrammarAccess;

@SuppressWarnings("all")
public class SimplePDLSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private SimplePDLGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == MyDslPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case MyDslPackage.HUMAIN:
				sequence_Humain(context, (Humain) semanticObject); 
				return; 
			case MyDslPackage.MATERIEL:
				sequence_Materiel(context, (Materiel) semanticObject); 
				return; 
			case MyDslPackage.PROCESS:
				sequence_Process(context, (org.xtext.simplepdl.myDsl.Process) semanticObject); 
				return; 
			case MyDslPackage.PROCESS_ELEMENT:
				sequence_ProcessElement_Impl(context, (ProcessElement) semanticObject); 
				return; 
			case MyDslPackage.WORK_DEFINITION:
				sequence_WorkDefinition(context, (WorkDefinition) semanticObject); 
				return; 
			case MyDslPackage.WORK_SEQUENCE:
				sequence_WorkSequence(context, (WorkSequence) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * <pre>
	 * Contexts:
	 *     Resource returns Humain
	 *     Humain returns Humain
	 *
	 * Constraint:
	 *     (name=EString role=EString?)
	 * </pre>
	 */
	protected void sequence_Humain(ISerializationContext context, Humain semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Resource returns Materiel
	 *     Materiel returns Materiel
	 *
	 * Constraint:
	 *     (name=EString quantite=EInt?)
	 * </pre>
	 */
	protected void sequence_Materiel(ISerializationContext context, Materiel semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ProcessElement returns ProcessElement
	 *     ProcessElement_Impl returns ProcessElement
	 *
	 * Constraint:
	 *     (name=EString description=EString?)
	 * </pre>
	 */
	protected void sequence_ProcessElement_Impl(ISerializationContext context, ProcessElement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Process returns Process
	 *
	 * Constraint:
	 *     (name=EString (processElements+=ProcessElement processElements+=ProcessElement*)?)
	 * </pre>
	 */
	protected void sequence_Process(ISerializationContext context, org.xtext.simplepdl.myDsl.Process semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ProcessElement returns WorkDefinition
	 *     WorkDefinition returns WorkDefinition
	 *
	 * Constraint:
	 *     (
	 *         name=EString 
	 *         description=EString? 
	 *         duration=EInt? 
	 *         startDate=EString? 
	 *         endDate=EString? 
	 *         (linksToSuccessor+=[WorkSequence|EString] linksToSuccessor+=[WorkSequence|EString]*)? 
	 *         (linksToPredecessor+=[WorkSequence|EString] linksToPredecessor+=[WorkSequence|EString]*)? 
	 *         (resource+=Resource resource+=Resource*)?
	 *     )
	 * </pre>
	 */
	protected void sequence_WorkDefinition(ISerializationContext context, WorkDefinition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ProcessElement returns WorkSequence
	 *     WorkSequence returns WorkSequence
	 *
	 * Constraint:
	 *     (name=EString description=EString? type=WorkSequenceType? predecessor=[WorkDefinition|EString] successor=[WorkDefinition|EString])
	 * </pre>
	 */
	protected void sequence_WorkSequence(ISerializationContext context, WorkSequence semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
