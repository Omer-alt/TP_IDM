/*
 * generated by Xtext 2.38.0
 */
package org.xtext.simplepdl.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.xtext.simplepdl.ide.contentassist.antlr.internal.InternalSimplePDLParser;
import org.xtext.simplepdl.services.SimplePDLGrammarAccess;

public class SimplePDLParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(SimplePDLGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, SimplePDLGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getProcessElementAccess().getAlternatives(), "rule__ProcessElement__Alternatives");
			builder.put(grammarAccess.getResourceAccess().getAlternatives(), "rule__Resource__Alternatives");
			builder.put(grammarAccess.getEStringAccess().getAlternatives(), "rule__EString__Alternatives");
			builder.put(grammarAccess.getWorkSequenceTypeAccess().getAlternatives(), "rule__WorkSequenceType__Alternatives");
			builder.put(grammarAccess.getProcessAccess().getGroup(), "rule__Process__Group__0");
			builder.put(grammarAccess.getProcessAccess().getGroup_4(), "rule__Process__Group_4__0");
			builder.put(grammarAccess.getProcessAccess().getGroup_4_3(), "rule__Process__Group_4_3__0");
			builder.put(grammarAccess.getProcessElement_ImplAccess().getGroup(), "rule__ProcessElement_Impl__Group__0");
			builder.put(grammarAccess.getProcessElement_ImplAccess().getGroup_4(), "rule__ProcessElement_Impl__Group_4__0");
			builder.put(grammarAccess.getWorkDefinitionAccess().getGroup(), "rule__WorkDefinition__Group__0");
			builder.put(grammarAccess.getWorkDefinitionAccess().getGroup_4(), "rule__WorkDefinition__Group_4__0");
			builder.put(grammarAccess.getWorkDefinitionAccess().getGroup_5(), "rule__WorkDefinition__Group_5__0");
			builder.put(grammarAccess.getWorkDefinitionAccess().getGroup_6(), "rule__WorkDefinition__Group_6__0");
			builder.put(grammarAccess.getWorkDefinitionAccess().getGroup_7(), "rule__WorkDefinition__Group_7__0");
			builder.put(grammarAccess.getWorkDefinitionAccess().getGroup_8(), "rule__WorkDefinition__Group_8__0");
			builder.put(grammarAccess.getWorkDefinitionAccess().getGroup_8_3(), "rule__WorkDefinition__Group_8_3__0");
			builder.put(grammarAccess.getWorkDefinitionAccess().getGroup_9(), "rule__WorkDefinition__Group_9__0");
			builder.put(grammarAccess.getWorkDefinitionAccess().getGroup_9_3(), "rule__WorkDefinition__Group_9_3__0");
			builder.put(grammarAccess.getWorkDefinitionAccess().getGroup_10(), "rule__WorkDefinition__Group_10__0");
			builder.put(grammarAccess.getWorkDefinitionAccess().getGroup_10_3(), "rule__WorkDefinition__Group_10_3__0");
			builder.put(grammarAccess.getWorkSequenceAccess().getGroup(), "rule__WorkSequence__Group__0");
			builder.put(grammarAccess.getWorkSequenceAccess().getGroup_3(), "rule__WorkSequence__Group_3__0");
			builder.put(grammarAccess.getWorkSequenceAccess().getGroup_4(), "rule__WorkSequence__Group_4__0");
			builder.put(grammarAccess.getEIntAccess().getGroup(), "rule__EInt__Group__0");
			builder.put(grammarAccess.getHumainAccess().getGroup(), "rule__Humain__Group__0");
			builder.put(grammarAccess.getHumainAccess().getGroup_4(), "rule__Humain__Group_4__0");
			builder.put(grammarAccess.getMaterielAccess().getGroup(), "rule__Materiel__Group__0");
			builder.put(grammarAccess.getMaterielAccess().getGroup_4(), "rule__Materiel__Group_4__0");
			builder.put(grammarAccess.getProcessAccess().getNameAssignment_2(), "rule__Process__NameAssignment_2");
			builder.put(grammarAccess.getProcessAccess().getProcessElementsAssignment_4_2(), "rule__Process__ProcessElementsAssignment_4_2");
			builder.put(grammarAccess.getProcessAccess().getProcessElementsAssignment_4_3_1(), "rule__Process__ProcessElementsAssignment_4_3_1");
			builder.put(grammarAccess.getProcessElement_ImplAccess().getNameAssignment_2(), "rule__ProcessElement_Impl__NameAssignment_2");
			builder.put(grammarAccess.getProcessElement_ImplAccess().getDescriptionAssignment_4_1(), "rule__ProcessElement_Impl__DescriptionAssignment_4_1");
			builder.put(grammarAccess.getWorkDefinitionAccess().getNameAssignment_2(), "rule__WorkDefinition__NameAssignment_2");
			builder.put(grammarAccess.getWorkDefinitionAccess().getDescriptionAssignment_4_1(), "rule__WorkDefinition__DescriptionAssignment_4_1");
			builder.put(grammarAccess.getWorkDefinitionAccess().getDurationAssignment_5_1(), "rule__WorkDefinition__DurationAssignment_5_1");
			builder.put(grammarAccess.getWorkDefinitionAccess().getStartDateAssignment_6_1(), "rule__WorkDefinition__StartDateAssignment_6_1");
			builder.put(grammarAccess.getWorkDefinitionAccess().getEndDateAssignment_7_1(), "rule__WorkDefinition__EndDateAssignment_7_1");
			builder.put(grammarAccess.getWorkDefinitionAccess().getLinksToSuccessorAssignment_8_2(), "rule__WorkDefinition__LinksToSuccessorAssignment_8_2");
			builder.put(grammarAccess.getWorkDefinitionAccess().getLinksToSuccessorAssignment_8_3_1(), "rule__WorkDefinition__LinksToSuccessorAssignment_8_3_1");
			builder.put(grammarAccess.getWorkDefinitionAccess().getLinksToPredecessorAssignment_9_2(), "rule__WorkDefinition__LinksToPredecessorAssignment_9_2");
			builder.put(grammarAccess.getWorkDefinitionAccess().getLinksToPredecessorAssignment_9_3_1(), "rule__WorkDefinition__LinksToPredecessorAssignment_9_3_1");
			builder.put(grammarAccess.getWorkDefinitionAccess().getResourceAssignment_10_2(), "rule__WorkDefinition__ResourceAssignment_10_2");
			builder.put(grammarAccess.getWorkDefinitionAccess().getResourceAssignment_10_3_1(), "rule__WorkDefinition__ResourceAssignment_10_3_1");
			builder.put(grammarAccess.getWorkSequenceAccess().getNameAssignment_1(), "rule__WorkSequence__NameAssignment_1");
			builder.put(grammarAccess.getWorkSequenceAccess().getDescriptionAssignment_3_1(), "rule__WorkSequence__DescriptionAssignment_3_1");
			builder.put(grammarAccess.getWorkSequenceAccess().getTypeAssignment_4_1(), "rule__WorkSequence__TypeAssignment_4_1");
			builder.put(grammarAccess.getWorkSequenceAccess().getPredecessorAssignment_6(), "rule__WorkSequence__PredecessorAssignment_6");
			builder.put(grammarAccess.getWorkSequenceAccess().getSuccessorAssignment_8(), "rule__WorkSequence__SuccessorAssignment_8");
			builder.put(grammarAccess.getHumainAccess().getNameAssignment_2(), "rule__Humain__NameAssignment_2");
			builder.put(grammarAccess.getHumainAccess().getRoleAssignment_4_1(), "rule__Humain__RoleAssignment_4_1");
			builder.put(grammarAccess.getMaterielAccess().getNameAssignment_2(), "rule__Materiel__NameAssignment_2");
			builder.put(grammarAccess.getMaterielAccess().getQuantiteAssignment_4_1(), "rule__Materiel__QuantiteAssignment_4_1");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private SimplePDLGrammarAccess grammarAccess;

	@Override
	protected InternalSimplePDLParser createParser() {
		InternalSimplePDLParser result = new InternalSimplePDLParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public SimplePDLGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(SimplePDLGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
